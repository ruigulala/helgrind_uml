# Makefile.in generated by automake 1.9.6 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = @INSTALL@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(top_srcdir)/Makefile.flags.am
@VGP_X86_LINUX_TRUE@am__append_1 = x86
@VGP_AMD64_LINUX_TRUE@am__append_2 = amd64
@VGP_PPC32_LINUX_TRUE@am__append_3 = ppc32
@VGP_PPC64_LINUX_TRUE@am__append_4 = ppc64
check_PROGRAMS = addressable$(EXEEXT) badaddrvalue$(EXEEXT) \
	badfree$(EXEEXT) badjump$(EXEEXT) badjump2$(EXEEXT) \
	badloop$(EXEEXT) badpoll$(EXEEXT) badrw$(EXEEXT) brk$(EXEEXT) \
	brk2$(EXEEXT) buflen_check$(EXEEXT) clientperm$(EXEEXT) \
	custom_alloc$(EXEEXT) deep_templates$(EXEEXT) \
	describe-block$(EXEEXT) doublefree$(EXEEXT) \
	error_counts$(EXEEXT) errs1$(EXEEXT) exitprog$(EXEEXT) \
	execve$(EXEEXT) execve2$(EXEEXT) erringfds$(EXEEXT) \
	fprw$(EXEEXT) fwrite$(EXEEXT) hello$(EXEEXT) inits$(EXEEXT) \
	inline$(EXEEXT) leak-0$(EXEEXT) leak-cycle$(EXEEXT) \
	leak-pool$(EXEEXT) leak-tree$(EXEEXT) leak-regroot$(EXEEXT) \
	leakotron$(EXEEXT) long_namespace_xml$(EXEEXT) \
	malloc_free_fill$(EXEEXT) malloc_usable$(EXEEXT) \
	malloc1$(EXEEXT) malloc2$(EXEEXT) malloc3$(EXEEXT) \
	manuel1$(EXEEXT) manuel2$(EXEEXT) manuel3$(EXEEXT) \
	match-overrun$(EXEEXT) memalign_test$(EXEEXT) \
	memalign2$(EXEEXT) memcmptest$(EXEEXT) mempool$(EXEEXT) \
	mmaptest$(EXEEXT) nanoleak$(EXEEXT) nanoleak2$(EXEEXT) \
	new_nothrow$(EXEEXT) noisy_child$(EXEEXT) null_socket$(EXEEXT) \
	oset_test$(EXEEXT) overlap$(EXEEXT) \
	partiallydefinedeq$(EXEEXT) partial_load$(EXEEXT) \
	pdb-realloc$(EXEEXT) pdb-realloc2$(EXEEXT) pipe$(EXEEXT) \
	pointer-trace$(EXEEXT) post-syscall$(EXEEXT) realloc1$(EXEEXT) \
	realloc2$(EXEEXT) realloc3$(EXEEXT) sh-mem$(EXEEXT) \
	sh-mem-random$(EXEEXT) sigaltstack$(EXEEXT) signal2$(EXEEXT) \
	sigprocmask$(EXEEXT) sigkill$(EXEEXT) stack_changes$(EXEEXT) \
	stack_switch$(EXEEXT) strchr$(EXEEXT) str_tester$(EXEEXT) \
	supp_unknown$(EXEEXT) supp1$(EXEEXT) supp2$(EXEEXT) \
	suppfree$(EXEEXT) trivialleak$(EXEEXT) mismatches$(EXEEXT) \
	new_override$(EXEEXT) metadata$(EXEEXT) vcpu_bz2$(EXEEXT) \
	vcpu_fbench$(EXEEXT) vcpu_fnfns$(EXEEXT) xml1$(EXEEXT) \
	wrap1$(EXEEXT) wrap2$(EXEEXT) wrap3$(EXEEXT) wrap4$(EXEEXT) \
	wrap5$(EXEEXT) wrap6$(EXEEXT) wrap7$(EXEEXT) \
	wrap7so.so$(EXEEXT) wrap8$(EXEEXT) writev$(EXEEXT) \
	zeropage$(EXEEXT)
subdir = memcheck/tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
addressable_SOURCES = addressable.c
addressable_OBJECTS = addressable.$(OBJEXT)
addressable_LDADD = $(LDADD)
badaddrvalue_SOURCES = badaddrvalue.c
badaddrvalue_OBJECTS = badaddrvalue.$(OBJEXT)
badaddrvalue_LDADD = $(LDADD)
badfree_SOURCES = badfree.c
badfree_OBJECTS = badfree.$(OBJEXT)
badfree_LDADD = $(LDADD)
badjump_SOURCES = badjump.c
badjump_OBJECTS = badjump.$(OBJEXT)
badjump_LDADD = $(LDADD)
badjump2_SOURCES = badjump2.c
badjump2_OBJECTS = badjump2.$(OBJEXT)
badjump2_LDADD = $(LDADD)
badloop_SOURCES = badloop.c
badloop_OBJECTS = badloop.$(OBJEXT)
badloop_LDADD = $(LDADD)
badpoll_SOURCES = badpoll.c
badpoll_OBJECTS = badpoll.$(OBJEXT)
badpoll_LDADD = $(LDADD)
badrw_SOURCES = badrw.c
badrw_OBJECTS = badrw.$(OBJEXT)
badrw_LDADD = $(LDADD)
brk_SOURCES = brk.c
brk_OBJECTS = brk.$(OBJEXT)
brk_LDADD = $(LDADD)
brk2_SOURCES = brk2.c
brk2_OBJECTS = brk2.$(OBJEXT)
brk2_LDADD = $(LDADD)
buflen_check_SOURCES = buflen_check.c
buflen_check_OBJECTS = buflen_check.$(OBJEXT)
buflen_check_LDADD = $(LDADD)
clientperm_SOURCES = clientperm.c
clientperm_OBJECTS = clientperm.$(OBJEXT)
clientperm_LDADD = $(LDADD)
custom_alloc_SOURCES = custom_alloc.c
custom_alloc_OBJECTS = custom_alloc.$(OBJEXT)
custom_alloc_LDADD = $(LDADD)
am_deep_templates_OBJECTS = deep_templates-deep_templates.$(OBJEXT)
deep_templates_OBJECTS = $(am_deep_templates_OBJECTS)
deep_templates_LDADD = $(LDADD)
describe_block_SOURCES = describe-block.c
describe_block_OBJECTS = describe-block.$(OBJEXT)
describe_block_LDADD = $(LDADD)
doublefree_SOURCES = doublefree.c
doublefree_OBJECTS = doublefree.$(OBJEXT)
doublefree_LDADD = $(LDADD)
erringfds_SOURCES = erringfds.c
erringfds_OBJECTS = erringfds.$(OBJEXT)
erringfds_LDADD = $(LDADD)
error_counts_SOURCES = error_counts.c
error_counts_OBJECTS = error_counts.$(OBJEXT)
error_counts_LDADD = $(LDADD)
errs1_SOURCES = errs1.c
errs1_OBJECTS = errs1.$(OBJEXT)
errs1_LDADD = $(LDADD)
execve_SOURCES = execve.c
execve_OBJECTS = execve.$(OBJEXT)
execve_LDADD = $(LDADD)
execve2_SOURCES = execve2.c
execve2_OBJECTS = execve2.$(OBJEXT)
execve2_LDADD = $(LDADD)
exitprog_SOURCES = exitprog.c
exitprog_OBJECTS = exitprog.$(OBJEXT)
exitprog_LDADD = $(LDADD)
fprw_SOURCES = fprw.c
fprw_OBJECTS = fprw.$(OBJEXT)
fprw_LDADD = $(LDADD)
fwrite_SOURCES = fwrite.c
fwrite_OBJECTS = fwrite.$(OBJEXT)
fwrite_LDADD = $(LDADD)
hello_SOURCES = hello.c
hello_OBJECTS = hello.$(OBJEXT)
hello_LDADD = $(LDADD)
inits_SOURCES = inits.c
inits_OBJECTS = inits.$(OBJEXT)
inits_LDADD = $(LDADD)
inline_SOURCES = inline.c
inline_OBJECTS = inline.$(OBJEXT)
inline_LDADD = $(LDADD)
leak_0_SOURCES = leak-0.c
leak_0_OBJECTS = leak-0.$(OBJEXT)
leak_0_LDADD = $(LDADD)
leak_cycle_SOURCES = leak-cycle.c
leak_cycle_OBJECTS = leak-cycle.$(OBJEXT)
leak_cycle_LDADD = $(LDADD)
leak_pool_SOURCES = leak-pool.c
leak_pool_OBJECTS = leak-pool.$(OBJEXT)
leak_pool_LDADD = $(LDADD)
leak_regroot_SOURCES = leak-regroot.c
leak_regroot_OBJECTS = leak-regroot.$(OBJEXT)
leak_regroot_LDADD = $(LDADD)
leak_tree_SOURCES = leak-tree.c
leak_tree_OBJECTS = leak-tree.$(OBJEXT)
leak_tree_LDADD = $(LDADD)
leakotron_SOURCES = leakotron.c
leakotron_OBJECTS = leakotron.$(OBJEXT)
leakotron_LDADD = $(LDADD)
am_long_namespace_xml_OBJECTS = long_namespace_xml.$(OBJEXT)
long_namespace_xml_OBJECTS = $(am_long_namespace_xml_OBJECTS)
long_namespace_xml_LDADD = $(LDADD)
malloc1_SOURCES = malloc1.c
malloc1_OBJECTS = malloc1.$(OBJEXT)
malloc1_LDADD = $(LDADD)
malloc2_SOURCES = malloc2.c
malloc2_OBJECTS = malloc2.$(OBJEXT)
malloc2_LDADD = $(LDADD)
malloc3_SOURCES = malloc3.c
malloc3_OBJECTS = malloc3.$(OBJEXT)
malloc3_LDADD = $(LDADD)
malloc_free_fill_SOURCES = malloc_free_fill.c
malloc_free_fill_OBJECTS = malloc_free_fill.$(OBJEXT)
malloc_free_fill_LDADD = $(LDADD)
malloc_usable_SOURCES = malloc_usable.c
malloc_usable_OBJECTS = malloc_usable.$(OBJEXT)
malloc_usable_LDADD = $(LDADD)
manuel1_SOURCES = manuel1.c
manuel1_OBJECTS = manuel1.$(OBJEXT)
manuel1_LDADD = $(LDADD)
manuel2_SOURCES = manuel2.c
manuel2_OBJECTS = manuel2.$(OBJEXT)
manuel2_LDADD = $(LDADD)
manuel3_SOURCES = manuel3.c
manuel3_OBJECTS = manuel3.$(OBJEXT)
manuel3_LDADD = $(LDADD)
match_overrun_SOURCES = match-overrun.c
match_overrun_OBJECTS = match-overrun.$(OBJEXT)
match_overrun_LDADD = $(LDADD)
memalign2_SOURCES = memalign2.c
memalign2_OBJECTS = memalign2.$(OBJEXT)
memalign2_LDADD = $(LDADD)
memalign_test_SOURCES = memalign_test.c
memalign_test_OBJECTS = memalign_test.$(OBJEXT)
memalign_test_LDADD = $(LDADD)
memcmptest_SOURCES = memcmptest.c
memcmptest_OBJECTS = memcmptest-memcmptest.$(OBJEXT)
memcmptest_LDADD = $(LDADD)
mempool_SOURCES = mempool.c
mempool_OBJECTS = mempool.$(OBJEXT)
mempool_LDADD = $(LDADD)
metadata_SOURCES = metadata.c
metadata_OBJECTS = metadata.$(OBJEXT)
metadata_LDADD = $(LDADD)
am_mismatches_OBJECTS = mismatches.$(OBJEXT)
mismatches_OBJECTS = $(am_mismatches_OBJECTS)
mismatches_LDADD = $(LDADD)
mmaptest_SOURCES = mmaptest.c
mmaptest_OBJECTS = mmaptest.$(OBJEXT)
mmaptest_LDADD = $(LDADD)
nanoleak_SOURCES = nanoleak.c
nanoleak_OBJECTS = nanoleak.$(OBJEXT)
nanoleak_LDADD = $(LDADD)
nanoleak2_SOURCES = nanoleak2.c
nanoleak2_OBJECTS = nanoleak2.$(OBJEXT)
nanoleak2_LDADD = $(LDADD)
am_new_nothrow_OBJECTS = new_nothrow.$(OBJEXT)
new_nothrow_OBJECTS = $(am_new_nothrow_OBJECTS)
new_nothrow_LDADD = $(LDADD)
am_new_override_OBJECTS = new_override.$(OBJEXT)
new_override_OBJECTS = $(am_new_override_OBJECTS)
new_override_LDADD = $(LDADD)
noisy_child_SOURCES = noisy_child.c
noisy_child_OBJECTS = noisy_child.$(OBJEXT)
noisy_child_LDADD = $(LDADD)
null_socket_SOURCES = null_socket.c
null_socket_OBJECTS = null_socket.$(OBJEXT)
null_socket_LDADD = $(LDADD)
oset_test_SOURCES = oset_test.c
oset_test_OBJECTS = oset_test-oset_test.$(OBJEXT)
oset_test_LDADD = $(LDADD)
overlap_SOURCES = overlap.c
overlap_OBJECTS = overlap-overlap.$(OBJEXT)
overlap_LDADD = $(LDADD)
partial_load_SOURCES = partial_load.c
partial_load_OBJECTS = partial_load.$(OBJEXT)
partial_load_LDADD = $(LDADD)
partiallydefinedeq_SOURCES = partiallydefinedeq.c
partiallydefinedeq_OBJECTS = partiallydefinedeq.$(OBJEXT)
partiallydefinedeq_LDADD = $(LDADD)
pdb_realloc_SOURCES = pdb-realloc.c
pdb_realloc_OBJECTS = pdb-realloc.$(OBJEXT)
pdb_realloc_LDADD = $(LDADD)
pdb_realloc2_SOURCES = pdb-realloc2.c
pdb_realloc2_OBJECTS = pdb-realloc2.$(OBJEXT)
pdb_realloc2_LDADD = $(LDADD)
pipe_SOURCES = pipe.c
pipe_OBJECTS = pipe.$(OBJEXT)
pipe_LDADD = $(LDADD)
pointer_trace_SOURCES = pointer-trace.c
pointer_trace_OBJECTS = pointer-trace.$(OBJEXT)
pointer_trace_LDADD = $(LDADD)
post_syscall_SOURCES = post-syscall.c
post_syscall_OBJECTS = post-syscall.$(OBJEXT)
post_syscall_LDADD = $(LDADD)
realloc1_SOURCES = realloc1.c
realloc1_OBJECTS = realloc1.$(OBJEXT)
realloc1_LDADD = $(LDADD)
realloc2_SOURCES = realloc2.c
realloc2_OBJECTS = realloc2.$(OBJEXT)
realloc2_LDADD = $(LDADD)
realloc3_SOURCES = realloc3.c
realloc3_OBJECTS = realloc3.$(OBJEXT)
realloc3_LDADD = $(LDADD)
sh_mem_SOURCES = sh-mem.c
sh_mem_OBJECTS = sh-mem.$(OBJEXT)
sh_mem_LDADD = $(LDADD)
sh_mem_random_SOURCES = sh-mem-random.c
sh_mem_random_OBJECTS = sh-mem-random.$(OBJEXT)
sh_mem_random_LDADD = $(LDADD)
sigaltstack_SOURCES = sigaltstack.c
sigaltstack_OBJECTS = sigaltstack.$(OBJEXT)
sigaltstack_LDADD = $(LDADD)
sigkill_SOURCES = sigkill.c
sigkill_OBJECTS = sigkill.$(OBJEXT)
sigkill_LDADD = $(LDADD)
signal2_SOURCES = signal2.c
signal2_OBJECTS = signal2.$(OBJEXT)
signal2_LDADD = $(LDADD)
sigprocmask_SOURCES = sigprocmask.c
sigprocmask_OBJECTS = sigprocmask.$(OBJEXT)
sigprocmask_LDADD = $(LDADD)
stack_changes_SOURCES = stack_changes.c
stack_changes_OBJECTS = stack_changes.$(OBJEXT)
stack_changes_LDADD = $(LDADD)
stack_switch_SOURCES = stack_switch.c
stack_switch_OBJECTS = stack_switch.$(OBJEXT)
stack_switch_DEPENDENCIES =
str_tester_SOURCES = str_tester.c
str_tester_OBJECTS = str_tester-str_tester.$(OBJEXT)
str_tester_LDADD = $(LDADD)
strchr_SOURCES = strchr.c
strchr_OBJECTS = strchr.$(OBJEXT)
strchr_LDADD = $(LDADD)
am_supp1_OBJECTS = supp.$(OBJEXT)
supp1_OBJECTS = $(am_supp1_OBJECTS)
supp1_LDADD = $(LDADD)
am_supp2_OBJECTS = supp.$(OBJEXT)
supp2_OBJECTS = $(am_supp2_OBJECTS)
supp2_LDADD = $(LDADD)
am_supp_unknown_OBJECTS = badjump.$(OBJEXT)
supp_unknown_OBJECTS = $(am_supp_unknown_OBJECTS)
supp_unknown_LDADD = $(LDADD)
suppfree_SOURCES = suppfree.c
suppfree_OBJECTS = suppfree.$(OBJEXT)
suppfree_LDADD = $(LDADD)
trivialleak_SOURCES = trivialleak.c
trivialleak_OBJECTS = trivialleak.$(OBJEXT)
trivialleak_LDADD = $(LDADD)
vcpu_bz2_SOURCES = vcpu_bz2.c
vcpu_bz2_OBJECTS = vcpu_bz2-vcpu_bz2.$(OBJEXT)
vcpu_bz2_LDADD = $(LDADD)
vcpu_fbench_SOURCES = vcpu_fbench.c
vcpu_fbench_OBJECTS = vcpu_fbench-vcpu_fbench.$(OBJEXT)
vcpu_fbench_LDADD = $(LDADD)
vcpu_fnfns_SOURCES = vcpu_fnfns.c
vcpu_fnfns_OBJECTS = vcpu_fnfns-vcpu_fnfns.$(OBJEXT)
vcpu_fnfns_DEPENDENCIES =
wrap1_SOURCES = wrap1.c
wrap1_OBJECTS = wrap1.$(OBJEXT)
wrap1_LDADD = $(LDADD)
wrap2_SOURCES = wrap2.c
wrap2_OBJECTS = wrap2.$(OBJEXT)
wrap2_LDADD = $(LDADD)
wrap3_SOURCES = wrap3.c
wrap3_OBJECTS = wrap3.$(OBJEXT)
wrap3_LDADD = $(LDADD)
wrap4_SOURCES = wrap4.c
wrap4_OBJECTS = wrap4.$(OBJEXT)
wrap4_LDADD = $(LDADD)
wrap5_SOURCES = wrap5.c
wrap5_OBJECTS = wrap5.$(OBJEXT)
wrap5_LDADD = $(LDADD)
wrap6_SOURCES = wrap6.c
wrap6_OBJECTS = wrap6-wrap6.$(OBJEXT)
wrap6_LDADD = $(LDADD)
am_wrap7_OBJECTS = wrap7.$(OBJEXT)
wrap7_OBJECTS = $(am_wrap7_OBJECTS)
am_wrap7so_so_OBJECTS = wrap7so_so-wrap7so.$(OBJEXT)
wrap7so_so_OBJECTS = $(am_wrap7so_so_OBJECTS)
wrap8_SOURCES = wrap8.c
wrap8_OBJECTS = wrap8.$(OBJEXT)
wrap8_LDADD = $(LDADD)
writev_SOURCES = writev.c
writev_OBJECTS = writev.$(OBJEXT)
writev_LDADD = $(LDADD)
xml1_SOURCES = xml1.c
xml1_OBJECTS = xml1.$(OBJEXT)
xml1_LDADD = $(LDADD)
zeropage_SOURCES = zeropage.c
zeropage_OBJECTS = zeropage.$(OBJEXT)
zeropage_LDADD = $(LDADD)
SCRIPTS = $(noinst_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = addressable.c badaddrvalue.c badfree.c badjump.c badjump2.c \
	badloop.c badpoll.c badrw.c brk.c brk2.c buflen_check.c \
	clientperm.c custom_alloc.c $(deep_templates_SOURCES) \
	describe-block.c doublefree.c erringfds.c error_counts.c \
	errs1.c execve.c execve2.c exitprog.c fprw.c fwrite.c hello.c \
	inits.c inline.c leak-0.c leak-cycle.c leak-pool.c \
	leak-regroot.c leak-tree.c leakotron.c \
	$(long_namespace_xml_SOURCES) malloc1.c malloc2.c malloc3.c \
	malloc_free_fill.c malloc_usable.c manuel1.c manuel2.c \
	manuel3.c match-overrun.c memalign2.c memalign_test.c \
	memcmptest.c mempool.c metadata.c $(mismatches_SOURCES) \
	mmaptest.c nanoleak.c nanoleak2.c $(new_nothrow_SOURCES) \
	$(new_override_SOURCES) noisy_child.c null_socket.c \
	oset_test.c overlap.c partial_load.c partiallydefinedeq.c \
	pdb-realloc.c pdb-realloc2.c pipe.c pointer-trace.c \
	post-syscall.c realloc1.c realloc2.c realloc3.c sh-mem.c \
	sh-mem-random.c sigaltstack.c sigkill.c signal2.c \
	sigprocmask.c stack_changes.c stack_switch.c str_tester.c \
	strchr.c $(supp1_SOURCES) $(supp2_SOURCES) \
	$(supp_unknown_SOURCES) suppfree.c trivialleak.c vcpu_bz2.c \
	vcpu_fbench.c vcpu_fnfns.c wrap1.c wrap2.c wrap3.c wrap4.c \
	wrap5.c wrap6.c $(wrap7_SOURCES) $(wrap7so_so_SOURCES) wrap8.c \
	writev.c xml1.c zeropage.c
DIST_SOURCES = addressable.c badaddrvalue.c badfree.c badjump.c \
	badjump2.c badloop.c badpoll.c badrw.c brk.c brk2.c \
	buflen_check.c clientperm.c custom_alloc.c \
	$(deep_templates_SOURCES) describe-block.c doublefree.c \
	erringfds.c error_counts.c errs1.c execve.c execve2.c \
	exitprog.c fprw.c fwrite.c hello.c inits.c inline.c leak-0.c \
	leak-cycle.c leak-pool.c leak-regroot.c leak-tree.c \
	leakotron.c $(long_namespace_xml_SOURCES) malloc1.c malloc2.c \
	malloc3.c malloc_free_fill.c malloc_usable.c manuel1.c \
	manuel2.c manuel3.c match-overrun.c memalign2.c \
	memalign_test.c memcmptest.c mempool.c metadata.c \
	$(mismatches_SOURCES) mmaptest.c nanoleak.c nanoleak2.c \
	$(new_nothrow_SOURCES) $(new_override_SOURCES) noisy_child.c \
	null_socket.c oset_test.c overlap.c partial_load.c \
	partiallydefinedeq.c pdb-realloc.c pdb-realloc2.c pipe.c \
	pointer-trace.c post-syscall.c realloc1.c realloc2.c \
	realloc3.c sh-mem.c sh-mem-random.c sigaltstack.c sigkill.c \
	signal2.c sigprocmask.c stack_changes.c stack_switch.c \
	str_tester.c strchr.c $(supp1_SOURCES) $(supp2_SOURCES) \
	$(supp_unknown_SOURCES) suppfree.c trivialleak.c vcpu_bz2.c \
	vcpu_fbench.c vcpu_fnfns.c wrap1.c wrap2.c wrap3.c wrap4.c \
	wrap5.c wrap6.c $(wrap7_SOURCES) $(wrap7so_so_SOURCES) wrap8.c \
	writev.c xml1.c zeropage.c
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
	html-recursive info-recursive install-data-recursive \
	install-exec-recursive install-info-recursive \
	install-recursive installcheck-recursive installdirs-recursive \
	pdf-recursive ps-recursive uninstall-info-recursive \
	uninstall-recursive
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMDEP_FALSE = @AMDEP_FALSE@
AMDEP_TRUE = @AMDEP_TRUE@
AMTAR = @AMTAR@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
BUILD_MPIWRAP_PRI_FALSE = @BUILD_MPIWRAP_PRI_FALSE@
BUILD_MPIWRAP_PRI_TRUE = @BUILD_MPIWRAP_PRI_TRUE@
BUILD_MPIWRAP_SEC_FALSE = @BUILD_MPIWRAP_SEC_FALSE@
BUILD_MPIWRAP_SEC_TRUE = @BUILD_MPIWRAP_SEC_TRUE@
BUILD_SSE3_TESTS_FALSE = @BUILD_SSE3_TESTS_FALSE@
BUILD_SSE3_TESTS_TRUE = @BUILD_SSE3_TESTS_TRUE@
CC = @CC@
CCAS = @CCAS@
CCASFLAGS = @CCASFLAGS@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CXX = @CXX@
CXXDEPMODE = @CXXDEPMODE@
CXXFLAGS = @CXXFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFAULT_SUPP = @DEFAULT_SUPP@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DISTCHECK_CONFIGURE_FLAGS = @DISTCHECK_CONFIGURE_FLAGS@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FLAG_FNO_STACK_PROTECTOR = @FLAG_FNO_STACK_PROTECTOR@
FLAG_M32 = @FLAG_M32@
FLAG_M64 = @FLAG_M64@
FLAG_MAIX32 = @FLAG_MAIX32@
FLAG_MAIX64 = @FLAG_MAIX64@
FLAG_MMMX = @FLAG_MMMX@
FLAG_MSSE = @FLAG_MSSE@
FLAG_WDECL_AFTER_STMT = @FLAG_WDECL_AFTER_STMT@
GDB = @GDB@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAINTAINER_MODE_FALSE = @MAINTAINER_MODE_FALSE@
MAINTAINER_MODE_TRUE = @MAINTAINER_MODE_TRUE@
MAKEINFO = @MAKEINFO@
MPI_CC = @MPI_CC@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PREFERRED_STACK_BOUNDARY = @PREFERRED_STACK_BOUNDARY@
RANLIB = @RANLIB@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VALT_LOAD_ADDRESS = @VALT_LOAD_ADDRESS@
VERSION = @VERSION@
VEX_DIR = @VEX_DIR@
VGO_AIX5_FALSE = @VGO_AIX5_FALSE@
VGO_AIX5_TRUE = @VGO_AIX5_TRUE@
VGO_LINUX_FALSE = @VGO_LINUX_FALSE@
VGO_LINUX_TRUE = @VGO_LINUX_TRUE@
VGP_AMD64_LINUX_FALSE = @VGP_AMD64_LINUX_FALSE@
VGP_AMD64_LINUX_TRUE = @VGP_AMD64_LINUX_TRUE@
VGP_HAVE_SECONDARY_FALSE = @VGP_HAVE_SECONDARY_FALSE@
VGP_HAVE_SECONDARY_TRUE = @VGP_HAVE_SECONDARY_TRUE@
VGP_PPC32_AIX5_FALSE = @VGP_PPC32_AIX5_FALSE@
VGP_PPC32_AIX5_TRUE = @VGP_PPC32_AIX5_TRUE@
VGP_PPC32_LINUX_FALSE = @VGP_PPC32_LINUX_FALSE@
VGP_PPC32_LINUX_TRUE = @VGP_PPC32_LINUX_TRUE@
VGP_PPC64_AIX5_FALSE = @VGP_PPC64_AIX5_FALSE@
VGP_PPC64_AIX5_TRUE = @VGP_PPC64_AIX5_TRUE@
VGP_PPC64_LINUX_FALSE = @VGP_PPC64_LINUX_FALSE@
VGP_PPC64_LINUX_TRUE = @VGP_PPC64_LINUX_TRUE@
VGP_X86_LINUX_FALSE = @VGP_X86_LINUX_FALSE@
VGP_X86_LINUX_TRUE = @VGP_X86_LINUX_TRUE@
VG_ARCH = @VG_ARCH@
VG_ARCH_ALL = @VG_ARCH_ALL@
VG_OS = @VG_OS@
VG_PLATFORM_PRI = @VG_PLATFORM_PRI@
VG_PLATFORM_SEC = @VG_PLATFORM_SEC@
ac_ct_CC = @ac_ct_CC@
ac_ct_CXX = @ac_ct_CXX@
ac_ct_RANLIB = @ac_ct_RANLIB@
ac_ct_STRIP = @ac_ct_STRIP@
am__fastdepCC_FALSE = @am__fastdepCC_FALSE@
am__fastdepCC_TRUE = @am__fastdepCC_TRUE@
am__fastdepCXX_FALSE = @am__fastdepCXX_FALSE@
am__fastdepCXX_TRUE = @am__fastdepCXX_TRUE@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
datadir = @datadir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
prefix = @prefix@
program_transform_name = @program_transform_name@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@

# Baseline flags for all compilations.  Aim here is to maximise
# performance and get whatever useful warnings we can out of gcc.
AM_CFLAGS_BASE = -O2 -g -Wmissing-prototypes -Wall -Wshadow \
                 -Wpointer-arith -Wstrict-prototypes -Wmissing-declarations \
                 -fno-strict-aliasing


# These flags are used for building the preload shared objects.
# The aim is to give reasonable performance but also to have good
# stack traces, since users often see stack traces extending 
# into (and through) the preloads.
AM_CFLAGS_PIC = -O -g -fpic -fno-omit-frame-pointer -fno-strict-aliasing

# Flags for specific targets
AM_FLAG_M3264_X86_LINUX = @FLAG_M32@
AM_CPPFLAGS_X86_LINUX = $(add_includes_x86_linux)
AM_CFLAGS_X86_LINUX = $(WERROR) @FLAG_M32@ @PREFERRED_STACK_BOUNDARY@ \
			 	$(AM_CFLAGS_BASE)

AM_CCASFLAGS_X86_LINUX = $(add_includes_x86_linux) @FLAG_M32@ -g
AM_FLAG_M3264_AMD64_LINUX = @FLAG_M64@
AM_CPPFLAGS_AMD64_LINUX = $(add_includes_amd64_linux)
AM_CFLAGS_AMD64_LINUX = $(WERROR) @FLAG_M64@ -fomit-frame-pointer \
				@PREFERRED_STACK_BOUNDARY@ $(AM_CFLAGS_BASE)

AM_CCASFLAGS_AMD64_LINUX = $(add_includes_amd64_linux) @FLAG_M64@ -g
AM_FLAG_M3264_PPC32_LINUX = @FLAG_M32@
AM_CPPFLAGS_PPC32_LINUX = $(add_includes_ppc32_linux)
AM_CFLAGS_PPC32_LINUX = $(WERROR) @FLAG_M32@ $(AM_CFLAGS_BASE)
AM_CCASFLAGS_PPC32_LINUX = $(add_includes_ppc32_linux) -Wa,-maltivec @FLAG_M32@ -g
AM_FLAG_M3264_PPC64_LINUX = @FLAG_M64@
AM_CPPFLAGS_PPC64_LINUX = $(add_includes_ppc64_linux)
AM_CFLAGS_PPC64_LINUX = $(WERROR) @FLAG_M64@ $(AM_CFLAGS_BASE)
AM_CCASFLAGS_PPC64_LINUX = $(add_includes_ppc64_linux) -Wa,-maltivec @FLAG_M64@ -g
AM_FLAG_M3264_PPC32_AIX5 = @FLAG_MAIX32@
AM_CPPFLAGS_PPC32_AIX5 = $(add_includes_ppc32_aix5)
AM_CFLAGS_PPC32_AIX5 = $(WERROR) @FLAG_MAIX32@ -mcpu=powerpc $(AM_CFLAGS_BASE)
AM_CCASFLAGS_PPC32_AIX5 = $(add_includes_ppc32_aix5) \
				@FLAG_MAIX32@ -mcpu=powerpc -g

AM_FLAG_M3264_PPC64_AIX5 = @FLAG_MAIX64@
AM_CPPFLAGS_PPC64_AIX5 = $(add_includes_ppc64_aix5)
AM_CFLAGS_PPC64_AIX5 = $(WERROR) @FLAG_MAIX64@ -mcpu=powerpc64 $(AM_CFLAGS_BASE)
AM_CCASFLAGS_PPC64_AIX5 = $(add_includes_ppc64_aix5) \
				@FLAG_MAIX64@ -mcpu=powerpc64 -g


# Flags for the primary target.  These must be used to build the
# regtests and performance tests.  In fact, these must be used to
# build anything which is built only once on a dual-arch build.
#
AM_FLAG_M3264_PRI = $(AM_FLAG_M3264_@VG_PLATFORM_PRI@)
AM_CPPFLAGS_PRI = $(AM_CPPFLAGS_@VG_PLATFORM_PRI@)
AM_CFLAGS_PRI = $(AM_CFLAGS_@VG_PLATFORM_PRI@)
AM_CCASFLAGS_PRI = $(AM_CCASFLAGS_@VG_PLATFORM_PRI@)
@VGP_HAVE_SECONDARY_FALSE@AM_FLAG_M3264_SEC = 
@VGP_HAVE_SECONDARY_TRUE@AM_FLAG_M3264_SEC = $(AM_FLAG_M3264_@VG_PLATFORM_SEC@)

# Baseline link flags for making dynamic shared objects.
#
PRELOAD_LDFLAGS_COMMON_LINUX = -nostdlib -shared -Wl,-z,interpose,-z,initfirst
PRELOAD_LDFLAGS_COMMON_AIX5 = -nostdlib -shared -Wl,-G -Wl,-bnogc
PRELOAD_LDFLAGS_X86_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M32@
PRELOAD_LDFLAGS_AMD64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M64@
PRELOAD_LDFLAGS_PPC32_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M32@
PRELOAD_LDFLAGS_PPC64_LINUX = $(PRELOAD_LDFLAGS_COMMON_LINUX) @FLAG_M64@
PRELOAD_LDFLAGS_PPC32_AIX5 = $(PRELOAD_LDFLAGS_COMMON_AIX5)  @FLAG_MAIX32@
PRELOAD_LDFLAGS_PPC64_AIX5 = $(PRELOAD_LDFLAGS_COMMON_AIX5)  @FLAG_MAIX64@

# For AM_FLAG_M3264_PRI
SUBDIRS = . $(am__append_1) $(am__append_2) $(am__append_3) \
	$(am__append_4)
DIST_SUBDIRS = ${VG_ARCH_ALL} .
noinst_SCRIPTS = filter_allocs filter_leak_check_size \
		 filter_stderr filter_stderr_backtrace filter_xml

EXTRA_DIST = $(noinst_SCRIPTS) \
	addressable.stderr.exp addressable.stdout.exp addressable.vgtest \
	badaddrvalue.stderr.exp \
	badaddrvalue.stdout.exp badaddrvalue.vgtest \
	badfree-2trace.stderr.exp badfree-2trace.vgtest \
	badfree.stderr.exp badfree.vgtest \
	badjump.stderr.exp badjump.vgtest \
	badjump2.stderr.exp badjump2.vgtest \
	badloop.stderr.exp badloop.vgtest \
	badpoll.stderr.exp badpoll.vgtest \
	badrw.stderr.exp badrw.vgtest \
	brk.stderr.exp brk.vgtest \
	brk2.stderr.exp brk2.vgtest \
	buflen_check.stderr.exp buflen_check.stderr.exp2 buflen_check.vgtest \
	clientperm.stderr.exp \
	clientperm.stdout.exp clientperm.vgtest \
	custom_alloc.stderr.exp custom_alloc.vgtest \
	deep_templates.vgtest \
	deep_templates.stdout.exp deep_templates.stderr.exp \
	describe-block.stderr.exp describe-block.vgtest \
	doublefree.stderr.exp doublefree.vgtest \
	erringfds.stderr.exp erringfds.stdout.exp erringfds.vgtest \
	error_counts.stderr.exp error_counts.stdout.exp error_counts.vgtest \
	errs1.stderr.exp errs1.vgtest \
	exitprog.stderr.exp exitprog.vgtest \
	execve.stderr.exp execve.stderr.exp2 execve.vgtest \
	execve2.stderr.exp execve2.stderr.exp2 execve2.vgtest \
	fprw.stderr.exp fprw.vgtest \
	fwrite.stderr.exp fwrite.stderr.exp2 fwrite.vgtest \
	inits.stderr.exp inits.vgtest \
	inline.stderr.exp inline.stdout.exp inline.vgtest \
	leak-0.vgtest leak-0.stderr.exp \
	leak-cycle.vgtest leak-cycle.stderr.exp leak-cycle.stderr.exp64 \
	leak-pool-0.vgtest leak-pool-0.stderr.exp leak-pool-0.stderr.exp64 \
	leak-pool-1.vgtest leak-pool-1.stderr.exp leak-pool-1.stderr.exp64 \
	leak-pool-2.vgtest leak-pool-2.stderr.exp leak-pool-2.stderr.exp64 \
	leak-pool-3.vgtest leak-pool-3.stderr.exp leak-pool-3.stderr.exp64 \
	leak-pool-4.vgtest leak-pool-4.stderr.exp leak-pool-4.stderr.exp64 \
	leak-pool-5.vgtest leak-pool-5.stderr.exp leak-pool-5.stderr.exp64 \
	leak-tree.vgtest leak-tree.stderr.exp \
	leak-tree.stderr.exp2 leak-tree.stderr.exp64 \
	leak-regroot.vgtest leak-regroot.stderr.exp \
	leakotron.vgtest leakotron.stdout.exp leakotron.stderr.exp \
	long_namespace_xml.vgtest long_namespace_xml.stdout.exp \
	long_namespace_xml.stderr.exp \
	malloc_free_fill.vgtest malloc_free_fill.stdout.exp \
	malloc_free_fill.stderr.exp-glibc25-amd64 \
	malloc_free_fill.stderr.exp-glibc25-x86 \
	malloc_usable.stderr.exp malloc_usable.vgtest \
	malloc1.stderr.exp malloc1.vgtest \
	malloc2.stderr.exp malloc2.vgtest \
	malloc3.stderr.exp malloc3.stdout.exp malloc3.vgtest \
	manuel1.stderr.exp manuel1.stdout.exp manuel1.vgtest \
	manuel2.stderr.exp manuel2.stderr.exp64 manuel2.stdout.exp manuel2.vgtest \
	manuel3.stderr.exp manuel3.vgtest \
	match-overrun.stderr.exp match-overrun.vgtest match-overrun.supp \
	memalign_test.stderr.exp memalign_test.vgtest \
	memalign2.stderr.exp memalign2.vgtest \
	memcmptest.stderr.exp memcmptest.stderr.exp2 \
	memcmptest.stdout.exp memcmptest.vgtest \
	mempool.stderr.exp mempool.stderr.exp64 mempool.vgtest \
	mismatches.stderr.exp mismatches.stderr.exp64 mismatches.vgtest \
	mmaptest.stderr.exp mmaptest.vgtest \
	nanoleak.stderr.exp nanoleak.vgtest \
	nanoleak_supp.stderr.exp nanoleak_supp.vgtest nanoleak.supp \
	nanoleak2.stderr.exp nanoleak2.vgtest \
	new_nothrow.stderr.exp new_nothrow.vgtest \
	new_override.stderr.exp new_override.stdout.exp new_override.vgtest \
	noisy_child.vgtest noisy_child.stderr.exp noisy_child.stdout.exp \
	null_socket.stderr.exp null_socket.vgtest \
	overlap.stderr.exp overlap.stdout.exp overlap.vgtest \
	oset_test.stderr.exp oset_test.stdout.exp oset_test.vgtest \
	partiallydefinedeq.vgtest partiallydefinedeq.stderr.exp \
	partiallydefinedeq.stderr.exp2 \
	partiallydefinedeq.stdout.exp \
	partial_load_ok.vgtest partial_load_ok.stderr.exp partial_load_ok.stderr.exp64 \
	partial_load_dflt.vgtest partial_load_dflt.stderr.exp partial_load_dflt.stderr.exp64 \
	pdb-realloc.stderr.exp pdb-realloc.vgtest \
	pdb-realloc2.stderr.exp pdb-realloc2.stdout.exp pdb-realloc2.vgtest \
	pipe.stderr.exp pipe.vgtest \
	pointer-trace.vgtest \
	pointer-trace.stderr.exp pointer-trace.stderr.exp64 \
	post-syscall.stderr.exp post-syscall.stdout.exp post-syscall.vgtest \
	realloc1.stderr.exp realloc1.vgtest \
	realloc2.stderr.exp realloc2.vgtest \
	realloc3.stderr.exp realloc3.vgtest \
	sh-mem.stderr.exp sh-mem.vgtest \
	sh-mem-random.stderr.exp sh-mem-random.stdout.exp64 \
	sh-mem-random.stdout.exp sh-mem-random.vgtest \
	sigaltstack.stderr.exp sigaltstack.vgtest \
	sigkill.stderr.exp sigkill.stderr.exp2 sigkill.stderr.exp3 sigkill.vgtest \
	signal2.stderr.exp signal2.stdout.exp signal2.vgtest \
	sigprocmask.stderr.exp sigprocmask.stderr.exp2 sigprocmask.vgtest \
	stack_changes.stderr.exp stack_changes.stdout.exp \
	stack_changes.stdout.exp2 stack_changes.vgtest \
	stack_switch.stderr.exp stack_switch.vgtest \
	strchr.stderr.exp strchr.stderr.exp2 strchr.vgtest \
	str_tester.stderr.exp str_tester.vgtest \
	supp_unknown.stderr.exp supp_unknown.vgtest supp_unknown.supp \
	supp1.stderr.exp supp1.vgtest \
	supp2.stderr.exp supp2.vgtest \
	supp.supp \
	suppfree.stderr.exp suppfree.vgtest \
	toobig-allocs.stderr.exp toobig-allocs.vgtest \
	trivialleak.stderr.exp trivialleak.vgtest \
	metadata.stderr.exp metadata.stdout.exp metadata.vgtest \
	vcpu_bz2.stdout.exp vcpu_bz2.stderr.exp vcpu_bz2.vgtest \
	vcpu_fbench.stdout.exp vcpu_fbench.stderr.exp vcpu_fbench.vgtest \
	vcpu_fnfns.stdout.exp vcpu_fnfns.stderr.exp vcpu_fnfns.vgtest \
	vgtest_ume.stderr.exp vgtest_ume.disabled \
	with-space.stderr.exp with-space.stdout.exp with-space.vgtest \
	wrap1.vgtest wrap1.stdout.exp wrap1.stderr.exp \
	wrap2.vgtest wrap2.stdout.exp wrap2.stderr.exp \
	wrap3.vgtest wrap3.stdout.exp wrap3.stderr.exp \
	wrap4.vgtest wrap4.stdout.exp wrap4.stderr.exp \
	wrap5.vgtest wrap5.stdout.exp wrap5.stderr.exp \
	wrap6.vgtest wrap6.stdout.exp wrap6.stderr.exp \
	wrap7.vgtest wrap7.stdout.exp wrap7.stderr.exp \
	wrap8.vgtest wrap8.stdout.exp wrap8.stderr.exp \
	wrap8.stdout.exp2 wrap8.stderr.exp2 \
	writev.stderr.exp writev.stderr.exp2 writev.stderr.exp3 writev.vgtest \
	xml1.stderr.exp xml1.stderr.exp2 xml1.stderr.exp3 \
	xml1.stderr.exp64 xml1.stderr.exp64_2 xml1.stdout.exp \
	xml1.vgtest \
	zeropage.stderr.exp zeropage.stderr.exp2 zeropage.stdout.exp \
	zeropage.vgtest

AM_CPPFLAGS = -I$(top_srcdir) -I$(top_srcdir)/include \
		-I$(top_srcdir)/coregrind -I$(top_builddir)/include \
		-I@VEX_DIR@/pub

AM_CFLAGS = $(WERROR) -Winline -Wall -Wshadow -g $(AM_FLAG_M3264_PRI)
AM_CXXFLAGS = $(AM_CFLAGS)

# Extra stuff for C tests
memcmptest_CFLAGS = $(AM_FLAG_M3264_PRI) $(AM_CFLAGS) -fno-builtin-memcmp
oset_test_CFLAGS = $(AM_FLAG_M3264_PRI) \
				-DVGA_$(VG_ARCH)=1 -DVGO_$(VG_OS)=1 \
				-DVGP_$(VG_ARCH)_$(VG_OS)=1

vcpu_bz2_CFLAGS = $(AM_FLAG_M3264_PRI) $(AM_CFLAGS) -O2 -g
vcpu_fbench_CFLAGS = $(AM_FLAG_M3264_PRI) $(AM_CFLAGS) -O2 -g
vcpu_fnfns_CFLAGS = $(AM_FLAG_M3264_PRI) $(AM_CFLAGS) -O2 -g
vcpu_fnfns_LDADD = -lm
wrap6_CFLAGS = $(AM_FLAG_M3264_PRI) $(AM_CFLAGS) -O2 -g

# Don't allow GCC to inline memcpy(), because then we can't intercept it
overlap_CFLAGS = $(AM_CFLAGS) -fno-builtin-memcpy
stack_switch_LDADD = -lpthread
str_tester_CFLAGS = $(AM_CFLAGS) -Wno-shadow
supp_unknown_SOURCES = badjump.c
supp1_SOURCES = supp.c
supp2_SOURCES = supp.c

# C++ tests
mismatches_SOURCES = mismatches.cpp
new_nothrow_SOURCES = new_nothrow.cpp
new_override_SOURCES = new_override.cpp
deep_templates_SOURCES = deep_templates.cpp
long_namespace_xml_SOURCES = long_namespace_xml.cpp
deep_templates_CXXFLAGS = $(AM_FLAG_M3264_PRI) $(AM_CFLAGS) -O -gstabs
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap1_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap2_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap3_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap4_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap5_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap6_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap8_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc

# Build shared object for wrap7
wrap7_SOURCES = wrap7.c
wrap7_DEPENDENCIES = wrap7so.so
@VGP_PPC32_AIX5_FALSE@@VGP_PPC64_AIX5_FALSE@wrap7_LDADD = wrap7so.so
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap7_LDADD = `pwd`/wrap7so.so
@VGP_PPC64_AIX5_TRUE@wrap7_LDADD = `pwd`/wrap7so.so
@VGP_PPC32_AIX5_FALSE@@VGP_PPC64_AIX5_FALSE@wrap7_LDFLAGS = $(AM_FLAG_M3264_PRI) \
@VGP_PPC32_AIX5_FALSE@@VGP_PPC64_AIX5_FALSE@				-Wl,-rpath,$(top_builddir)/memcheck/tests

@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap7_LDFLAGS = $(AM_FLAG_M3264_PRI) -Wl,-G -Wl,-bnogc
@VGP_PPC64_AIX5_TRUE@wrap7_LDFLAGS = $(AM_FLAG_M3264_PRI)
wrap7so_so_SOURCES = wrap7so.c
wrap7so_so_LDADD = 
wrap7so_so_DEPENDENCIES = 
wrap7so_so_CFLAGS = -fpic $(AM_FLAG_M3264_PRI)
@VGP_PPC32_AIX5_FALSE@@VGP_PPC64_AIX5_FALSE@wrap7so_so_LDFLAGS = -fpic $(AM_FLAG_M3264_PRI) -shared \
@VGP_PPC32_AIX5_FALSE@@VGP_PPC64_AIX5_FALSE@				-Wl,-soname -Wl,wrap7so.so

@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@wrap7so_so_LDFLAGS = -fpic $(AM_FLAG_M3264_PRI) -shared \
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@				-Wl,-G -Wl,-bnogc

@VGP_PPC64_AIX5_TRUE@wrap7so_so_LDFLAGS = -fpic $(AM_FLAG_M3264_PRI) -shared
all: all-recursive

.SUFFIXES:
.SUFFIXES: .c .cpp .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/Makefile.flags.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  memcheck/tests/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  memcheck/tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
addressable$(EXEEXT): $(addressable_OBJECTS) $(addressable_DEPENDENCIES) 
	@rm -f addressable$(EXEEXT)
	$(LINK) $(addressable_LDFLAGS) $(addressable_OBJECTS) $(addressable_LDADD) $(LIBS)
badaddrvalue$(EXEEXT): $(badaddrvalue_OBJECTS) $(badaddrvalue_DEPENDENCIES) 
	@rm -f badaddrvalue$(EXEEXT)
	$(LINK) $(badaddrvalue_LDFLAGS) $(badaddrvalue_OBJECTS) $(badaddrvalue_LDADD) $(LIBS)
badfree$(EXEEXT): $(badfree_OBJECTS) $(badfree_DEPENDENCIES) 
	@rm -f badfree$(EXEEXT)
	$(LINK) $(badfree_LDFLAGS) $(badfree_OBJECTS) $(badfree_LDADD) $(LIBS)
badjump$(EXEEXT): $(badjump_OBJECTS) $(badjump_DEPENDENCIES) 
	@rm -f badjump$(EXEEXT)
	$(LINK) $(badjump_LDFLAGS) $(badjump_OBJECTS) $(badjump_LDADD) $(LIBS)
badjump2$(EXEEXT): $(badjump2_OBJECTS) $(badjump2_DEPENDENCIES) 
	@rm -f badjump2$(EXEEXT)
	$(LINK) $(badjump2_LDFLAGS) $(badjump2_OBJECTS) $(badjump2_LDADD) $(LIBS)
badloop$(EXEEXT): $(badloop_OBJECTS) $(badloop_DEPENDENCIES) 
	@rm -f badloop$(EXEEXT)
	$(LINK) $(badloop_LDFLAGS) $(badloop_OBJECTS) $(badloop_LDADD) $(LIBS)
badpoll$(EXEEXT): $(badpoll_OBJECTS) $(badpoll_DEPENDENCIES) 
	@rm -f badpoll$(EXEEXT)
	$(LINK) $(badpoll_LDFLAGS) $(badpoll_OBJECTS) $(badpoll_LDADD) $(LIBS)
badrw$(EXEEXT): $(badrw_OBJECTS) $(badrw_DEPENDENCIES) 
	@rm -f badrw$(EXEEXT)
	$(LINK) $(badrw_LDFLAGS) $(badrw_OBJECTS) $(badrw_LDADD) $(LIBS)
brk$(EXEEXT): $(brk_OBJECTS) $(brk_DEPENDENCIES) 
	@rm -f brk$(EXEEXT)
	$(LINK) $(brk_LDFLAGS) $(brk_OBJECTS) $(brk_LDADD) $(LIBS)
brk2$(EXEEXT): $(brk2_OBJECTS) $(brk2_DEPENDENCIES) 
	@rm -f brk2$(EXEEXT)
	$(LINK) $(brk2_LDFLAGS) $(brk2_OBJECTS) $(brk2_LDADD) $(LIBS)
buflen_check$(EXEEXT): $(buflen_check_OBJECTS) $(buflen_check_DEPENDENCIES) 
	@rm -f buflen_check$(EXEEXT)
	$(LINK) $(buflen_check_LDFLAGS) $(buflen_check_OBJECTS) $(buflen_check_LDADD) $(LIBS)
clientperm$(EXEEXT): $(clientperm_OBJECTS) $(clientperm_DEPENDENCIES) 
	@rm -f clientperm$(EXEEXT)
	$(LINK) $(clientperm_LDFLAGS) $(clientperm_OBJECTS) $(clientperm_LDADD) $(LIBS)
custom_alloc$(EXEEXT): $(custom_alloc_OBJECTS) $(custom_alloc_DEPENDENCIES) 
	@rm -f custom_alloc$(EXEEXT)
	$(LINK) $(custom_alloc_LDFLAGS) $(custom_alloc_OBJECTS) $(custom_alloc_LDADD) $(LIBS)
deep_templates$(EXEEXT): $(deep_templates_OBJECTS) $(deep_templates_DEPENDENCIES) 
	@rm -f deep_templates$(EXEEXT)
	$(CXXLINK) $(deep_templates_LDFLAGS) $(deep_templates_OBJECTS) $(deep_templates_LDADD) $(LIBS)
describe-block$(EXEEXT): $(describe_block_OBJECTS) $(describe_block_DEPENDENCIES) 
	@rm -f describe-block$(EXEEXT)
	$(LINK) $(describe_block_LDFLAGS) $(describe_block_OBJECTS) $(describe_block_LDADD) $(LIBS)
doublefree$(EXEEXT): $(doublefree_OBJECTS) $(doublefree_DEPENDENCIES) 
	@rm -f doublefree$(EXEEXT)
	$(LINK) $(doublefree_LDFLAGS) $(doublefree_OBJECTS) $(doublefree_LDADD) $(LIBS)
erringfds$(EXEEXT): $(erringfds_OBJECTS) $(erringfds_DEPENDENCIES) 
	@rm -f erringfds$(EXEEXT)
	$(LINK) $(erringfds_LDFLAGS) $(erringfds_OBJECTS) $(erringfds_LDADD) $(LIBS)
error_counts$(EXEEXT): $(error_counts_OBJECTS) $(error_counts_DEPENDENCIES) 
	@rm -f error_counts$(EXEEXT)
	$(LINK) $(error_counts_LDFLAGS) $(error_counts_OBJECTS) $(error_counts_LDADD) $(LIBS)
errs1$(EXEEXT): $(errs1_OBJECTS) $(errs1_DEPENDENCIES) 
	@rm -f errs1$(EXEEXT)
	$(LINK) $(errs1_LDFLAGS) $(errs1_OBJECTS) $(errs1_LDADD) $(LIBS)
execve$(EXEEXT): $(execve_OBJECTS) $(execve_DEPENDENCIES) 
	@rm -f execve$(EXEEXT)
	$(LINK) $(execve_LDFLAGS) $(execve_OBJECTS) $(execve_LDADD) $(LIBS)
execve2$(EXEEXT): $(execve2_OBJECTS) $(execve2_DEPENDENCIES) 
	@rm -f execve2$(EXEEXT)
	$(LINK) $(execve2_LDFLAGS) $(execve2_OBJECTS) $(execve2_LDADD) $(LIBS)
exitprog$(EXEEXT): $(exitprog_OBJECTS) $(exitprog_DEPENDENCIES) 
	@rm -f exitprog$(EXEEXT)
	$(LINK) $(exitprog_LDFLAGS) $(exitprog_OBJECTS) $(exitprog_LDADD) $(LIBS)
fprw$(EXEEXT): $(fprw_OBJECTS) $(fprw_DEPENDENCIES) 
	@rm -f fprw$(EXEEXT)
	$(LINK) $(fprw_LDFLAGS) $(fprw_OBJECTS) $(fprw_LDADD) $(LIBS)
fwrite$(EXEEXT): $(fwrite_OBJECTS) $(fwrite_DEPENDENCIES) 
	@rm -f fwrite$(EXEEXT)
	$(LINK) $(fwrite_LDFLAGS) $(fwrite_OBJECTS) $(fwrite_LDADD) $(LIBS)
hello$(EXEEXT): $(hello_OBJECTS) $(hello_DEPENDENCIES) 
	@rm -f hello$(EXEEXT)
	$(LINK) $(hello_LDFLAGS) $(hello_OBJECTS) $(hello_LDADD) $(LIBS)
inits$(EXEEXT): $(inits_OBJECTS) $(inits_DEPENDENCIES) 
	@rm -f inits$(EXEEXT)
	$(LINK) $(inits_LDFLAGS) $(inits_OBJECTS) $(inits_LDADD) $(LIBS)
inline$(EXEEXT): $(inline_OBJECTS) $(inline_DEPENDENCIES) 
	@rm -f inline$(EXEEXT)
	$(LINK) $(inline_LDFLAGS) $(inline_OBJECTS) $(inline_LDADD) $(LIBS)
leak-0$(EXEEXT): $(leak_0_OBJECTS) $(leak_0_DEPENDENCIES) 
	@rm -f leak-0$(EXEEXT)
	$(LINK) $(leak_0_LDFLAGS) $(leak_0_OBJECTS) $(leak_0_LDADD) $(LIBS)
leak-cycle$(EXEEXT): $(leak_cycle_OBJECTS) $(leak_cycle_DEPENDENCIES) 
	@rm -f leak-cycle$(EXEEXT)
	$(LINK) $(leak_cycle_LDFLAGS) $(leak_cycle_OBJECTS) $(leak_cycle_LDADD) $(LIBS)
leak-pool$(EXEEXT): $(leak_pool_OBJECTS) $(leak_pool_DEPENDENCIES) 
	@rm -f leak-pool$(EXEEXT)
	$(LINK) $(leak_pool_LDFLAGS) $(leak_pool_OBJECTS) $(leak_pool_LDADD) $(LIBS)
leak-regroot$(EXEEXT): $(leak_regroot_OBJECTS) $(leak_regroot_DEPENDENCIES) 
	@rm -f leak-regroot$(EXEEXT)
	$(LINK) $(leak_regroot_LDFLAGS) $(leak_regroot_OBJECTS) $(leak_regroot_LDADD) $(LIBS)
leak-tree$(EXEEXT): $(leak_tree_OBJECTS) $(leak_tree_DEPENDENCIES) 
	@rm -f leak-tree$(EXEEXT)
	$(LINK) $(leak_tree_LDFLAGS) $(leak_tree_OBJECTS) $(leak_tree_LDADD) $(LIBS)
leakotron$(EXEEXT): $(leakotron_OBJECTS) $(leakotron_DEPENDENCIES) 
	@rm -f leakotron$(EXEEXT)
	$(LINK) $(leakotron_LDFLAGS) $(leakotron_OBJECTS) $(leakotron_LDADD) $(LIBS)
long_namespace_xml$(EXEEXT): $(long_namespace_xml_OBJECTS) $(long_namespace_xml_DEPENDENCIES) 
	@rm -f long_namespace_xml$(EXEEXT)
	$(CXXLINK) $(long_namespace_xml_LDFLAGS) $(long_namespace_xml_OBJECTS) $(long_namespace_xml_LDADD) $(LIBS)
malloc1$(EXEEXT): $(malloc1_OBJECTS) $(malloc1_DEPENDENCIES) 
	@rm -f malloc1$(EXEEXT)
	$(LINK) $(malloc1_LDFLAGS) $(malloc1_OBJECTS) $(malloc1_LDADD) $(LIBS)
malloc2$(EXEEXT): $(malloc2_OBJECTS) $(malloc2_DEPENDENCIES) 
	@rm -f malloc2$(EXEEXT)
	$(LINK) $(malloc2_LDFLAGS) $(malloc2_OBJECTS) $(malloc2_LDADD) $(LIBS)
malloc3$(EXEEXT): $(malloc3_OBJECTS) $(malloc3_DEPENDENCIES) 
	@rm -f malloc3$(EXEEXT)
	$(LINK) $(malloc3_LDFLAGS) $(malloc3_OBJECTS) $(malloc3_LDADD) $(LIBS)
malloc_free_fill$(EXEEXT): $(malloc_free_fill_OBJECTS) $(malloc_free_fill_DEPENDENCIES) 
	@rm -f malloc_free_fill$(EXEEXT)
	$(LINK) $(malloc_free_fill_LDFLAGS) $(malloc_free_fill_OBJECTS) $(malloc_free_fill_LDADD) $(LIBS)
malloc_usable$(EXEEXT): $(malloc_usable_OBJECTS) $(malloc_usable_DEPENDENCIES) 
	@rm -f malloc_usable$(EXEEXT)
	$(LINK) $(malloc_usable_LDFLAGS) $(malloc_usable_OBJECTS) $(malloc_usable_LDADD) $(LIBS)
manuel1$(EXEEXT): $(manuel1_OBJECTS) $(manuel1_DEPENDENCIES) 
	@rm -f manuel1$(EXEEXT)
	$(LINK) $(manuel1_LDFLAGS) $(manuel1_OBJECTS) $(manuel1_LDADD) $(LIBS)
manuel2$(EXEEXT): $(manuel2_OBJECTS) $(manuel2_DEPENDENCIES) 
	@rm -f manuel2$(EXEEXT)
	$(LINK) $(manuel2_LDFLAGS) $(manuel2_OBJECTS) $(manuel2_LDADD) $(LIBS)
manuel3$(EXEEXT): $(manuel3_OBJECTS) $(manuel3_DEPENDENCIES) 
	@rm -f manuel3$(EXEEXT)
	$(LINK) $(manuel3_LDFLAGS) $(manuel3_OBJECTS) $(manuel3_LDADD) $(LIBS)
match-overrun$(EXEEXT): $(match_overrun_OBJECTS) $(match_overrun_DEPENDENCIES) 
	@rm -f match-overrun$(EXEEXT)
	$(LINK) $(match_overrun_LDFLAGS) $(match_overrun_OBJECTS) $(match_overrun_LDADD) $(LIBS)
memalign2$(EXEEXT): $(memalign2_OBJECTS) $(memalign2_DEPENDENCIES) 
	@rm -f memalign2$(EXEEXT)
	$(LINK) $(memalign2_LDFLAGS) $(memalign2_OBJECTS) $(memalign2_LDADD) $(LIBS)
memalign_test$(EXEEXT): $(memalign_test_OBJECTS) $(memalign_test_DEPENDENCIES) 
	@rm -f memalign_test$(EXEEXT)
	$(LINK) $(memalign_test_LDFLAGS) $(memalign_test_OBJECTS) $(memalign_test_LDADD) $(LIBS)
memcmptest$(EXEEXT): $(memcmptest_OBJECTS) $(memcmptest_DEPENDENCIES) 
	@rm -f memcmptest$(EXEEXT)
	$(LINK) $(memcmptest_LDFLAGS) $(memcmptest_OBJECTS) $(memcmptest_LDADD) $(LIBS)
mempool$(EXEEXT): $(mempool_OBJECTS) $(mempool_DEPENDENCIES) 
	@rm -f mempool$(EXEEXT)
	$(LINK) $(mempool_LDFLAGS) $(mempool_OBJECTS) $(mempool_LDADD) $(LIBS)
metadata$(EXEEXT): $(metadata_OBJECTS) $(metadata_DEPENDENCIES) 
	@rm -f metadata$(EXEEXT)
	$(LINK) $(metadata_LDFLAGS) $(metadata_OBJECTS) $(metadata_LDADD) $(LIBS)
mismatches$(EXEEXT): $(mismatches_OBJECTS) $(mismatches_DEPENDENCIES) 
	@rm -f mismatches$(EXEEXT)
	$(CXXLINK) $(mismatches_LDFLAGS) $(mismatches_OBJECTS) $(mismatches_LDADD) $(LIBS)
mmaptest$(EXEEXT): $(mmaptest_OBJECTS) $(mmaptest_DEPENDENCIES) 
	@rm -f mmaptest$(EXEEXT)
	$(LINK) $(mmaptest_LDFLAGS) $(mmaptest_OBJECTS) $(mmaptest_LDADD) $(LIBS)
nanoleak$(EXEEXT): $(nanoleak_OBJECTS) $(nanoleak_DEPENDENCIES) 
	@rm -f nanoleak$(EXEEXT)
	$(LINK) $(nanoleak_LDFLAGS) $(nanoleak_OBJECTS) $(nanoleak_LDADD) $(LIBS)
nanoleak2$(EXEEXT): $(nanoleak2_OBJECTS) $(nanoleak2_DEPENDENCIES) 
	@rm -f nanoleak2$(EXEEXT)
	$(LINK) $(nanoleak2_LDFLAGS) $(nanoleak2_OBJECTS) $(nanoleak2_LDADD) $(LIBS)
new_nothrow$(EXEEXT): $(new_nothrow_OBJECTS) $(new_nothrow_DEPENDENCIES) 
	@rm -f new_nothrow$(EXEEXT)
	$(CXXLINK) $(new_nothrow_LDFLAGS) $(new_nothrow_OBJECTS) $(new_nothrow_LDADD) $(LIBS)
new_override$(EXEEXT): $(new_override_OBJECTS) $(new_override_DEPENDENCIES) 
	@rm -f new_override$(EXEEXT)
	$(CXXLINK) $(new_override_LDFLAGS) $(new_override_OBJECTS) $(new_override_LDADD) $(LIBS)
noisy_child$(EXEEXT): $(noisy_child_OBJECTS) $(noisy_child_DEPENDENCIES) 
	@rm -f noisy_child$(EXEEXT)
	$(LINK) $(noisy_child_LDFLAGS) $(noisy_child_OBJECTS) $(noisy_child_LDADD) $(LIBS)
null_socket$(EXEEXT): $(null_socket_OBJECTS) $(null_socket_DEPENDENCIES) 
	@rm -f null_socket$(EXEEXT)
	$(LINK) $(null_socket_LDFLAGS) $(null_socket_OBJECTS) $(null_socket_LDADD) $(LIBS)
oset_test$(EXEEXT): $(oset_test_OBJECTS) $(oset_test_DEPENDENCIES) 
	@rm -f oset_test$(EXEEXT)
	$(LINK) $(oset_test_LDFLAGS) $(oset_test_OBJECTS) $(oset_test_LDADD) $(LIBS)
overlap$(EXEEXT): $(overlap_OBJECTS) $(overlap_DEPENDENCIES) 
	@rm -f overlap$(EXEEXT)
	$(LINK) $(overlap_LDFLAGS) $(overlap_OBJECTS) $(overlap_LDADD) $(LIBS)
partial_load$(EXEEXT): $(partial_load_OBJECTS) $(partial_load_DEPENDENCIES) 
	@rm -f partial_load$(EXEEXT)
	$(LINK) $(partial_load_LDFLAGS) $(partial_load_OBJECTS) $(partial_load_LDADD) $(LIBS)
partiallydefinedeq$(EXEEXT): $(partiallydefinedeq_OBJECTS) $(partiallydefinedeq_DEPENDENCIES) 
	@rm -f partiallydefinedeq$(EXEEXT)
	$(LINK) $(partiallydefinedeq_LDFLAGS) $(partiallydefinedeq_OBJECTS) $(partiallydefinedeq_LDADD) $(LIBS)
pdb-realloc$(EXEEXT): $(pdb_realloc_OBJECTS) $(pdb_realloc_DEPENDENCIES) 
	@rm -f pdb-realloc$(EXEEXT)
	$(LINK) $(pdb_realloc_LDFLAGS) $(pdb_realloc_OBJECTS) $(pdb_realloc_LDADD) $(LIBS)
pdb-realloc2$(EXEEXT): $(pdb_realloc2_OBJECTS) $(pdb_realloc2_DEPENDENCIES) 
	@rm -f pdb-realloc2$(EXEEXT)
	$(LINK) $(pdb_realloc2_LDFLAGS) $(pdb_realloc2_OBJECTS) $(pdb_realloc2_LDADD) $(LIBS)
pipe$(EXEEXT): $(pipe_OBJECTS) $(pipe_DEPENDENCIES) 
	@rm -f pipe$(EXEEXT)
	$(LINK) $(pipe_LDFLAGS) $(pipe_OBJECTS) $(pipe_LDADD) $(LIBS)
pointer-trace$(EXEEXT): $(pointer_trace_OBJECTS) $(pointer_trace_DEPENDENCIES) 
	@rm -f pointer-trace$(EXEEXT)
	$(LINK) $(pointer_trace_LDFLAGS) $(pointer_trace_OBJECTS) $(pointer_trace_LDADD) $(LIBS)
post-syscall$(EXEEXT): $(post_syscall_OBJECTS) $(post_syscall_DEPENDENCIES) 
	@rm -f post-syscall$(EXEEXT)
	$(LINK) $(post_syscall_LDFLAGS) $(post_syscall_OBJECTS) $(post_syscall_LDADD) $(LIBS)
realloc1$(EXEEXT): $(realloc1_OBJECTS) $(realloc1_DEPENDENCIES) 
	@rm -f realloc1$(EXEEXT)
	$(LINK) $(realloc1_LDFLAGS) $(realloc1_OBJECTS) $(realloc1_LDADD) $(LIBS)
realloc2$(EXEEXT): $(realloc2_OBJECTS) $(realloc2_DEPENDENCIES) 
	@rm -f realloc2$(EXEEXT)
	$(LINK) $(realloc2_LDFLAGS) $(realloc2_OBJECTS) $(realloc2_LDADD) $(LIBS)
realloc3$(EXEEXT): $(realloc3_OBJECTS) $(realloc3_DEPENDENCIES) 
	@rm -f realloc3$(EXEEXT)
	$(LINK) $(realloc3_LDFLAGS) $(realloc3_OBJECTS) $(realloc3_LDADD) $(LIBS)
sh-mem$(EXEEXT): $(sh_mem_OBJECTS) $(sh_mem_DEPENDENCIES) 
	@rm -f sh-mem$(EXEEXT)
	$(LINK) $(sh_mem_LDFLAGS) $(sh_mem_OBJECTS) $(sh_mem_LDADD) $(LIBS)
sh-mem-random$(EXEEXT): $(sh_mem_random_OBJECTS) $(sh_mem_random_DEPENDENCIES) 
	@rm -f sh-mem-random$(EXEEXT)
	$(LINK) $(sh_mem_random_LDFLAGS) $(sh_mem_random_OBJECTS) $(sh_mem_random_LDADD) $(LIBS)
sigaltstack$(EXEEXT): $(sigaltstack_OBJECTS) $(sigaltstack_DEPENDENCIES) 
	@rm -f sigaltstack$(EXEEXT)
	$(LINK) $(sigaltstack_LDFLAGS) $(sigaltstack_OBJECTS) $(sigaltstack_LDADD) $(LIBS)
sigkill$(EXEEXT): $(sigkill_OBJECTS) $(sigkill_DEPENDENCIES) 
	@rm -f sigkill$(EXEEXT)
	$(LINK) $(sigkill_LDFLAGS) $(sigkill_OBJECTS) $(sigkill_LDADD) $(LIBS)
signal2$(EXEEXT): $(signal2_OBJECTS) $(signal2_DEPENDENCIES) 
	@rm -f signal2$(EXEEXT)
	$(LINK) $(signal2_LDFLAGS) $(signal2_OBJECTS) $(signal2_LDADD) $(LIBS)
sigprocmask$(EXEEXT): $(sigprocmask_OBJECTS) $(sigprocmask_DEPENDENCIES) 
	@rm -f sigprocmask$(EXEEXT)
	$(LINK) $(sigprocmask_LDFLAGS) $(sigprocmask_OBJECTS) $(sigprocmask_LDADD) $(LIBS)
stack_changes$(EXEEXT): $(stack_changes_OBJECTS) $(stack_changes_DEPENDENCIES) 
	@rm -f stack_changes$(EXEEXT)
	$(LINK) $(stack_changes_LDFLAGS) $(stack_changes_OBJECTS) $(stack_changes_LDADD) $(LIBS)
stack_switch$(EXEEXT): $(stack_switch_OBJECTS) $(stack_switch_DEPENDENCIES) 
	@rm -f stack_switch$(EXEEXT)
	$(LINK) $(stack_switch_LDFLAGS) $(stack_switch_OBJECTS) $(stack_switch_LDADD) $(LIBS)
str_tester$(EXEEXT): $(str_tester_OBJECTS) $(str_tester_DEPENDENCIES) 
	@rm -f str_tester$(EXEEXT)
	$(LINK) $(str_tester_LDFLAGS) $(str_tester_OBJECTS) $(str_tester_LDADD) $(LIBS)
strchr$(EXEEXT): $(strchr_OBJECTS) $(strchr_DEPENDENCIES) 
	@rm -f strchr$(EXEEXT)
	$(LINK) $(strchr_LDFLAGS) $(strchr_OBJECTS) $(strchr_LDADD) $(LIBS)
supp1$(EXEEXT): $(supp1_OBJECTS) $(supp1_DEPENDENCIES) 
	@rm -f supp1$(EXEEXT)
	$(LINK) $(supp1_LDFLAGS) $(supp1_OBJECTS) $(supp1_LDADD) $(LIBS)
supp2$(EXEEXT): $(supp2_OBJECTS) $(supp2_DEPENDENCIES) 
	@rm -f supp2$(EXEEXT)
	$(LINK) $(supp2_LDFLAGS) $(supp2_OBJECTS) $(supp2_LDADD) $(LIBS)
supp_unknown$(EXEEXT): $(supp_unknown_OBJECTS) $(supp_unknown_DEPENDENCIES) 
	@rm -f supp_unknown$(EXEEXT)
	$(LINK) $(supp_unknown_LDFLAGS) $(supp_unknown_OBJECTS) $(supp_unknown_LDADD) $(LIBS)
suppfree$(EXEEXT): $(suppfree_OBJECTS) $(suppfree_DEPENDENCIES) 
	@rm -f suppfree$(EXEEXT)
	$(LINK) $(suppfree_LDFLAGS) $(suppfree_OBJECTS) $(suppfree_LDADD) $(LIBS)
trivialleak$(EXEEXT): $(trivialleak_OBJECTS) $(trivialleak_DEPENDENCIES) 
	@rm -f trivialleak$(EXEEXT)
	$(LINK) $(trivialleak_LDFLAGS) $(trivialleak_OBJECTS) $(trivialleak_LDADD) $(LIBS)
vcpu_bz2$(EXEEXT): $(vcpu_bz2_OBJECTS) $(vcpu_bz2_DEPENDENCIES) 
	@rm -f vcpu_bz2$(EXEEXT)
	$(LINK) $(vcpu_bz2_LDFLAGS) $(vcpu_bz2_OBJECTS) $(vcpu_bz2_LDADD) $(LIBS)
vcpu_fbench$(EXEEXT): $(vcpu_fbench_OBJECTS) $(vcpu_fbench_DEPENDENCIES) 
	@rm -f vcpu_fbench$(EXEEXT)
	$(LINK) $(vcpu_fbench_LDFLAGS) $(vcpu_fbench_OBJECTS) $(vcpu_fbench_LDADD) $(LIBS)
vcpu_fnfns$(EXEEXT): $(vcpu_fnfns_OBJECTS) $(vcpu_fnfns_DEPENDENCIES) 
	@rm -f vcpu_fnfns$(EXEEXT)
	$(LINK) $(vcpu_fnfns_LDFLAGS) $(vcpu_fnfns_OBJECTS) $(vcpu_fnfns_LDADD) $(LIBS)
wrap1$(EXEEXT): $(wrap1_OBJECTS) $(wrap1_DEPENDENCIES) 
	@rm -f wrap1$(EXEEXT)
	$(LINK) $(wrap1_LDFLAGS) $(wrap1_OBJECTS) $(wrap1_LDADD) $(LIBS)
wrap2$(EXEEXT): $(wrap2_OBJECTS) $(wrap2_DEPENDENCIES) 
	@rm -f wrap2$(EXEEXT)
	$(LINK) $(wrap2_LDFLAGS) $(wrap2_OBJECTS) $(wrap2_LDADD) $(LIBS)
wrap3$(EXEEXT): $(wrap3_OBJECTS) $(wrap3_DEPENDENCIES) 
	@rm -f wrap3$(EXEEXT)
	$(LINK) $(wrap3_LDFLAGS) $(wrap3_OBJECTS) $(wrap3_LDADD) $(LIBS)
wrap4$(EXEEXT): $(wrap4_OBJECTS) $(wrap4_DEPENDENCIES) 
	@rm -f wrap4$(EXEEXT)
	$(LINK) $(wrap4_LDFLAGS) $(wrap4_OBJECTS) $(wrap4_LDADD) $(LIBS)
wrap5$(EXEEXT): $(wrap5_OBJECTS) $(wrap5_DEPENDENCIES) 
	@rm -f wrap5$(EXEEXT)
	$(LINK) $(wrap5_LDFLAGS) $(wrap5_OBJECTS) $(wrap5_LDADD) $(LIBS)
wrap6$(EXEEXT): $(wrap6_OBJECTS) $(wrap6_DEPENDENCIES) 
	@rm -f wrap6$(EXEEXT)
	$(LINK) $(wrap6_LDFLAGS) $(wrap6_OBJECTS) $(wrap6_LDADD) $(LIBS)
wrap7$(EXEEXT): $(wrap7_OBJECTS) $(wrap7_DEPENDENCIES) 
	@rm -f wrap7$(EXEEXT)
	$(LINK) $(wrap7_LDFLAGS) $(wrap7_OBJECTS) $(wrap7_LDADD) $(LIBS)
wrap7so.so$(EXEEXT): $(wrap7so_so_OBJECTS) $(wrap7so_so_DEPENDENCIES) 
	@rm -f wrap7so.so$(EXEEXT)
	$(LINK) $(wrap7so_so_LDFLAGS) $(wrap7so_so_OBJECTS) $(wrap7so_so_LDADD) $(LIBS)
wrap8$(EXEEXT): $(wrap8_OBJECTS) $(wrap8_DEPENDENCIES) 
	@rm -f wrap8$(EXEEXT)
	$(LINK) $(wrap8_LDFLAGS) $(wrap8_OBJECTS) $(wrap8_LDADD) $(LIBS)
writev$(EXEEXT): $(writev_OBJECTS) $(writev_DEPENDENCIES) 
	@rm -f writev$(EXEEXT)
	$(LINK) $(writev_LDFLAGS) $(writev_OBJECTS) $(writev_LDADD) $(LIBS)
xml1$(EXEEXT): $(xml1_OBJECTS) $(xml1_DEPENDENCIES) 
	@rm -f xml1$(EXEEXT)
	$(LINK) $(xml1_LDFLAGS) $(xml1_OBJECTS) $(xml1_LDADD) $(LIBS)
zeropage$(EXEEXT): $(zeropage_OBJECTS) $(zeropage_DEPENDENCIES) 
	@rm -f zeropage$(EXEEXT)
	$(LINK) $(zeropage_LDFLAGS) $(zeropage_OBJECTS) $(zeropage_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/addressable.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badaddrvalue.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badfree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badjump.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badjump2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badloop.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badpoll.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/badrw.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/brk.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/brk2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/buflen_check.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/clientperm.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/custom_alloc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/deep_templates-deep_templates.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/describe-block.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/doublefree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/erringfds.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/error_counts.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/errs1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/execve.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/execve2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/exitprog.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fprw.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/fwrite.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/hello.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inits.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/inline.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-0.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-cycle.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-pool.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-regroot.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leak-tree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/leakotron.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/long_namespace_xml.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc_free_fill.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/malloc_usable.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manuel1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manuel2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/manuel3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/match-overrun.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memalign2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memalign_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/memcmptest-memcmptest.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mempool.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/metadata.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mismatches.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mmaptest.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nanoleak.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/nanoleak2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/new_nothrow.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/new_override.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/noisy_child.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/null_socket.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/oset_test-oset_test.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/overlap-overlap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/partial_load.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/partiallydefinedeq.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pdb-realloc.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pdb-realloc2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pipe.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/pointer-trace.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/post-syscall.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/realloc1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/realloc2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/realloc3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sh-mem-random.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sh-mem.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigaltstack.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigkill.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/signal2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sigprocmask.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stack_changes.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/stack_switch.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/str_tester-str_tester.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/strchr.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/supp.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/suppfree.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/trivialleak.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vcpu_bz2-vcpu_bz2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vcpu_fbench-vcpu_fbench.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap2.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap3.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap4.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap5.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap6-wrap6.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap7.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap7so_so-wrap7so.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/wrap8.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/writev.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xml1.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/zeropage.Po@am__quote@

.c.o:
@am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

memcmptest-memcmptest.o: memcmptest.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memcmptest_CFLAGS) $(CFLAGS) -MT memcmptest-memcmptest.o -MD -MP -MF "$(DEPDIR)/memcmptest-memcmptest.Tpo" -c -o memcmptest-memcmptest.o `test -f 'memcmptest.c' || echo '$(srcdir)/'`memcmptest.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/memcmptest-memcmptest.Tpo" "$(DEPDIR)/memcmptest-memcmptest.Po"; else rm -f "$(DEPDIR)/memcmptest-memcmptest.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='memcmptest.c' object='memcmptest-memcmptest.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memcmptest_CFLAGS) $(CFLAGS) -c -o memcmptest-memcmptest.o `test -f 'memcmptest.c' || echo '$(srcdir)/'`memcmptest.c

memcmptest-memcmptest.obj: memcmptest.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memcmptest_CFLAGS) $(CFLAGS) -MT memcmptest-memcmptest.obj -MD -MP -MF "$(DEPDIR)/memcmptest-memcmptest.Tpo" -c -o memcmptest-memcmptest.obj `if test -f 'memcmptest.c'; then $(CYGPATH_W) 'memcmptest.c'; else $(CYGPATH_W) '$(srcdir)/memcmptest.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/memcmptest-memcmptest.Tpo" "$(DEPDIR)/memcmptest-memcmptest.Po"; else rm -f "$(DEPDIR)/memcmptest-memcmptest.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='memcmptest.c' object='memcmptest-memcmptest.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(memcmptest_CFLAGS) $(CFLAGS) -c -o memcmptest-memcmptest.obj `if test -f 'memcmptest.c'; then $(CYGPATH_W) 'memcmptest.c'; else $(CYGPATH_W) '$(srcdir)/memcmptest.c'; fi`

oset_test-oset_test.o: oset_test.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(oset_test_CFLAGS) $(CFLAGS) -MT oset_test-oset_test.o -MD -MP -MF "$(DEPDIR)/oset_test-oset_test.Tpo" -c -o oset_test-oset_test.o `test -f 'oset_test.c' || echo '$(srcdir)/'`oset_test.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/oset_test-oset_test.Tpo" "$(DEPDIR)/oset_test-oset_test.Po"; else rm -f "$(DEPDIR)/oset_test-oset_test.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='oset_test.c' object='oset_test-oset_test.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(oset_test_CFLAGS) $(CFLAGS) -c -o oset_test-oset_test.o `test -f 'oset_test.c' || echo '$(srcdir)/'`oset_test.c

oset_test-oset_test.obj: oset_test.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(oset_test_CFLAGS) $(CFLAGS) -MT oset_test-oset_test.obj -MD -MP -MF "$(DEPDIR)/oset_test-oset_test.Tpo" -c -o oset_test-oset_test.obj `if test -f 'oset_test.c'; then $(CYGPATH_W) 'oset_test.c'; else $(CYGPATH_W) '$(srcdir)/oset_test.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/oset_test-oset_test.Tpo" "$(DEPDIR)/oset_test-oset_test.Po"; else rm -f "$(DEPDIR)/oset_test-oset_test.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='oset_test.c' object='oset_test-oset_test.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(oset_test_CFLAGS) $(CFLAGS) -c -o oset_test-oset_test.obj `if test -f 'oset_test.c'; then $(CYGPATH_W) 'oset_test.c'; else $(CYGPATH_W) '$(srcdir)/oset_test.c'; fi`

overlap-overlap.o: overlap.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(overlap_CFLAGS) $(CFLAGS) -MT overlap-overlap.o -MD -MP -MF "$(DEPDIR)/overlap-overlap.Tpo" -c -o overlap-overlap.o `test -f 'overlap.c' || echo '$(srcdir)/'`overlap.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/overlap-overlap.Tpo" "$(DEPDIR)/overlap-overlap.Po"; else rm -f "$(DEPDIR)/overlap-overlap.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='overlap.c' object='overlap-overlap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(overlap_CFLAGS) $(CFLAGS) -c -o overlap-overlap.o `test -f 'overlap.c' || echo '$(srcdir)/'`overlap.c

overlap-overlap.obj: overlap.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(overlap_CFLAGS) $(CFLAGS) -MT overlap-overlap.obj -MD -MP -MF "$(DEPDIR)/overlap-overlap.Tpo" -c -o overlap-overlap.obj `if test -f 'overlap.c'; then $(CYGPATH_W) 'overlap.c'; else $(CYGPATH_W) '$(srcdir)/overlap.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/overlap-overlap.Tpo" "$(DEPDIR)/overlap-overlap.Po"; else rm -f "$(DEPDIR)/overlap-overlap.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='overlap.c' object='overlap-overlap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(overlap_CFLAGS) $(CFLAGS) -c -o overlap-overlap.obj `if test -f 'overlap.c'; then $(CYGPATH_W) 'overlap.c'; else $(CYGPATH_W) '$(srcdir)/overlap.c'; fi`

str_tester-str_tester.o: str_tester.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(str_tester_CFLAGS) $(CFLAGS) -MT str_tester-str_tester.o -MD -MP -MF "$(DEPDIR)/str_tester-str_tester.Tpo" -c -o str_tester-str_tester.o `test -f 'str_tester.c' || echo '$(srcdir)/'`str_tester.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/str_tester-str_tester.Tpo" "$(DEPDIR)/str_tester-str_tester.Po"; else rm -f "$(DEPDIR)/str_tester-str_tester.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='str_tester.c' object='str_tester-str_tester.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(str_tester_CFLAGS) $(CFLAGS) -c -o str_tester-str_tester.o `test -f 'str_tester.c' || echo '$(srcdir)/'`str_tester.c

str_tester-str_tester.obj: str_tester.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(str_tester_CFLAGS) $(CFLAGS) -MT str_tester-str_tester.obj -MD -MP -MF "$(DEPDIR)/str_tester-str_tester.Tpo" -c -o str_tester-str_tester.obj `if test -f 'str_tester.c'; then $(CYGPATH_W) 'str_tester.c'; else $(CYGPATH_W) '$(srcdir)/str_tester.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/str_tester-str_tester.Tpo" "$(DEPDIR)/str_tester-str_tester.Po"; else rm -f "$(DEPDIR)/str_tester-str_tester.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='str_tester.c' object='str_tester-str_tester.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(str_tester_CFLAGS) $(CFLAGS) -c -o str_tester-str_tester.obj `if test -f 'str_tester.c'; then $(CYGPATH_W) 'str_tester.c'; else $(CYGPATH_W) '$(srcdir)/str_tester.c'; fi`

vcpu_bz2-vcpu_bz2.o: vcpu_bz2.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_bz2_CFLAGS) $(CFLAGS) -MT vcpu_bz2-vcpu_bz2.o -MD -MP -MF "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Tpo" -c -o vcpu_bz2-vcpu_bz2.o `test -f 'vcpu_bz2.c' || echo '$(srcdir)/'`vcpu_bz2.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Tpo" "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Po"; else rm -f "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='vcpu_bz2.c' object='vcpu_bz2-vcpu_bz2.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_bz2_CFLAGS) $(CFLAGS) -c -o vcpu_bz2-vcpu_bz2.o `test -f 'vcpu_bz2.c' || echo '$(srcdir)/'`vcpu_bz2.c

vcpu_bz2-vcpu_bz2.obj: vcpu_bz2.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_bz2_CFLAGS) $(CFLAGS) -MT vcpu_bz2-vcpu_bz2.obj -MD -MP -MF "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Tpo" -c -o vcpu_bz2-vcpu_bz2.obj `if test -f 'vcpu_bz2.c'; then $(CYGPATH_W) 'vcpu_bz2.c'; else $(CYGPATH_W) '$(srcdir)/vcpu_bz2.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Tpo" "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Po"; else rm -f "$(DEPDIR)/vcpu_bz2-vcpu_bz2.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='vcpu_bz2.c' object='vcpu_bz2-vcpu_bz2.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_bz2_CFLAGS) $(CFLAGS) -c -o vcpu_bz2-vcpu_bz2.obj `if test -f 'vcpu_bz2.c'; then $(CYGPATH_W) 'vcpu_bz2.c'; else $(CYGPATH_W) '$(srcdir)/vcpu_bz2.c'; fi`

vcpu_fbench-vcpu_fbench.o: vcpu_fbench.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fbench_CFLAGS) $(CFLAGS) -MT vcpu_fbench-vcpu_fbench.o -MD -MP -MF "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Tpo" -c -o vcpu_fbench-vcpu_fbench.o `test -f 'vcpu_fbench.c' || echo '$(srcdir)/'`vcpu_fbench.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Tpo" "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Po"; else rm -f "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='vcpu_fbench.c' object='vcpu_fbench-vcpu_fbench.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fbench_CFLAGS) $(CFLAGS) -c -o vcpu_fbench-vcpu_fbench.o `test -f 'vcpu_fbench.c' || echo '$(srcdir)/'`vcpu_fbench.c

vcpu_fbench-vcpu_fbench.obj: vcpu_fbench.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fbench_CFLAGS) $(CFLAGS) -MT vcpu_fbench-vcpu_fbench.obj -MD -MP -MF "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Tpo" -c -o vcpu_fbench-vcpu_fbench.obj `if test -f 'vcpu_fbench.c'; then $(CYGPATH_W) 'vcpu_fbench.c'; else $(CYGPATH_W) '$(srcdir)/vcpu_fbench.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Tpo" "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Po"; else rm -f "$(DEPDIR)/vcpu_fbench-vcpu_fbench.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='vcpu_fbench.c' object='vcpu_fbench-vcpu_fbench.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fbench_CFLAGS) $(CFLAGS) -c -o vcpu_fbench-vcpu_fbench.obj `if test -f 'vcpu_fbench.c'; then $(CYGPATH_W) 'vcpu_fbench.c'; else $(CYGPATH_W) '$(srcdir)/vcpu_fbench.c'; fi`

vcpu_fnfns-vcpu_fnfns.o: vcpu_fnfns.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fnfns_CFLAGS) $(CFLAGS) -MT vcpu_fnfns-vcpu_fnfns.o -MD -MP -MF "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Tpo" -c -o vcpu_fnfns-vcpu_fnfns.o `test -f 'vcpu_fnfns.c' || echo '$(srcdir)/'`vcpu_fnfns.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Tpo" "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Po"; else rm -f "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='vcpu_fnfns.c' object='vcpu_fnfns-vcpu_fnfns.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fnfns_CFLAGS) $(CFLAGS) -c -o vcpu_fnfns-vcpu_fnfns.o `test -f 'vcpu_fnfns.c' || echo '$(srcdir)/'`vcpu_fnfns.c

vcpu_fnfns-vcpu_fnfns.obj: vcpu_fnfns.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fnfns_CFLAGS) $(CFLAGS) -MT vcpu_fnfns-vcpu_fnfns.obj -MD -MP -MF "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Tpo" -c -o vcpu_fnfns-vcpu_fnfns.obj `if test -f 'vcpu_fnfns.c'; then $(CYGPATH_W) 'vcpu_fnfns.c'; else $(CYGPATH_W) '$(srcdir)/vcpu_fnfns.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Tpo" "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Po"; else rm -f "$(DEPDIR)/vcpu_fnfns-vcpu_fnfns.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='vcpu_fnfns.c' object='vcpu_fnfns-vcpu_fnfns.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(vcpu_fnfns_CFLAGS) $(CFLAGS) -c -o vcpu_fnfns-vcpu_fnfns.obj `if test -f 'vcpu_fnfns.c'; then $(CYGPATH_W) 'vcpu_fnfns.c'; else $(CYGPATH_W) '$(srcdir)/vcpu_fnfns.c'; fi`

wrap6-wrap6.o: wrap6.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap6_CFLAGS) $(CFLAGS) -MT wrap6-wrap6.o -MD -MP -MF "$(DEPDIR)/wrap6-wrap6.Tpo" -c -o wrap6-wrap6.o `test -f 'wrap6.c' || echo '$(srcdir)/'`wrap6.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/wrap6-wrap6.Tpo" "$(DEPDIR)/wrap6-wrap6.Po"; else rm -f "$(DEPDIR)/wrap6-wrap6.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='wrap6.c' object='wrap6-wrap6.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap6_CFLAGS) $(CFLAGS) -c -o wrap6-wrap6.o `test -f 'wrap6.c' || echo '$(srcdir)/'`wrap6.c

wrap6-wrap6.obj: wrap6.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap6_CFLAGS) $(CFLAGS) -MT wrap6-wrap6.obj -MD -MP -MF "$(DEPDIR)/wrap6-wrap6.Tpo" -c -o wrap6-wrap6.obj `if test -f 'wrap6.c'; then $(CYGPATH_W) 'wrap6.c'; else $(CYGPATH_W) '$(srcdir)/wrap6.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/wrap6-wrap6.Tpo" "$(DEPDIR)/wrap6-wrap6.Po"; else rm -f "$(DEPDIR)/wrap6-wrap6.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='wrap6.c' object='wrap6-wrap6.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap6_CFLAGS) $(CFLAGS) -c -o wrap6-wrap6.obj `if test -f 'wrap6.c'; then $(CYGPATH_W) 'wrap6.c'; else $(CYGPATH_W) '$(srcdir)/wrap6.c'; fi`

wrap7so_so-wrap7so.o: wrap7so.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap7so_so_CFLAGS) $(CFLAGS) -MT wrap7so_so-wrap7so.o -MD -MP -MF "$(DEPDIR)/wrap7so_so-wrap7so.Tpo" -c -o wrap7so_so-wrap7so.o `test -f 'wrap7so.c' || echo '$(srcdir)/'`wrap7so.c; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/wrap7so_so-wrap7so.Tpo" "$(DEPDIR)/wrap7so_so-wrap7so.Po"; else rm -f "$(DEPDIR)/wrap7so_so-wrap7so.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='wrap7so.c' object='wrap7so_so-wrap7so.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap7so_so_CFLAGS) $(CFLAGS) -c -o wrap7so_so-wrap7so.o `test -f 'wrap7so.c' || echo '$(srcdir)/'`wrap7so.c

wrap7so_so-wrap7so.obj: wrap7so.c
@am__fastdepCC_TRUE@	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap7so_so_CFLAGS) $(CFLAGS) -MT wrap7so_so-wrap7so.obj -MD -MP -MF "$(DEPDIR)/wrap7so_so-wrap7so.Tpo" -c -o wrap7so_so-wrap7so.obj `if test -f 'wrap7so.c'; then $(CYGPATH_W) 'wrap7so.c'; else $(CYGPATH_W) '$(srcdir)/wrap7so.c'; fi`; \
@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/wrap7so_so-wrap7so.Tpo" "$(DEPDIR)/wrap7so_so-wrap7so.Po"; else rm -f "$(DEPDIR)/wrap7so_so-wrap7so.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='wrap7so.c' object='wrap7so_so-wrap7so.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(wrap7so_so_CFLAGS) $(CFLAGS) -c -o wrap7so_so-wrap7so.obj `if test -f 'wrap7so.c'; then $(CYGPATH_W) 'wrap7so.c'; else $(CYGPATH_W) '$(srcdir)/wrap7so.c'; fi`

.cpp.o:
@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
@am__fastdepCXX_TRUE@	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

deep_templates-deep_templates.o: deep_templates.cpp
@am__fastdepCXX_TRUE@	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(deep_templates_CXXFLAGS) $(CXXFLAGS) -MT deep_templates-deep_templates.o -MD -MP -MF "$(DEPDIR)/deep_templates-deep_templates.Tpo" -c -o deep_templates-deep_templates.o `test -f 'deep_templates.cpp' || echo '$(srcdir)/'`deep_templates.cpp; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/deep_templates-deep_templates.Tpo" "$(DEPDIR)/deep_templates-deep_templates.Po"; else rm -f "$(DEPDIR)/deep_templates-deep_templates.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='deep_templates.cpp' object='deep_templates-deep_templates.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(deep_templates_CXXFLAGS) $(CXXFLAGS) -c -o deep_templates-deep_templates.o `test -f 'deep_templates.cpp' || echo '$(srcdir)/'`deep_templates.cpp

deep_templates-deep_templates.obj: deep_templates.cpp
@am__fastdepCXX_TRUE@	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(deep_templates_CXXFLAGS) $(CXXFLAGS) -MT deep_templates-deep_templates.obj -MD -MP -MF "$(DEPDIR)/deep_templates-deep_templates.Tpo" -c -o deep_templates-deep_templates.obj `if test -f 'deep_templates.cpp'; then $(CYGPATH_W) 'deep_templates.cpp'; else $(CYGPATH_W) '$(srcdir)/deep_templates.cpp'; fi`; \
@am__fastdepCXX_TRUE@	then mv -f "$(DEPDIR)/deep_templates-deep_templates.Tpo" "$(DEPDIR)/deep_templates-deep_templates.Po"; else rm -f "$(DEPDIR)/deep_templates-deep_templates.Tpo"; exit 1; fi
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	source='deep_templates.cpp' object='deep_templates-deep_templates.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCXX_FALSE@	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCXX_FALSE@	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(deep_templates_CXXFLAGS) $(CXXFLAGS) -c -o deep_templates-deep_templates.obj `if test -f 'deep_templates.cpp'; then $(CYGPATH_W) 'deep_templates.cpp'; else $(CYGPATH_W) '$(srcdir)/deep_templates.cpp'; fi`
uninstall-info-am:

# This directory's subdirectories are mostly independent; you can cd
# into them and run `make' without going through this Makefile.
# To change the values of `make' variables: instead of editing Makefiles,
# (1) if the variable is set in `config.status', edit `config.status'
#     (which will cause the Makefiles to be regenerated when you run `make');
# (2) otherwise, pass the desired values on the `make' command line.
$(RECURSIVE_TARGETS):
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    dot_seen=yes; \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done; \
	if test "$$dot_seen" = "no"; then \
	  $(MAKE) $(AM_MAKEFLAGS) "$$target-am" || exit 1; \
	fi; test -z "$$fail"

mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcom='exit 1'; \
	for f in x $$MAKEFLAGS; do \
	  case $$f in \
	    *=* | --[!k]*);; \
	    *k*) failcom='fail=yes';; \
	  esac; \
	done; \
	dot_seen=no; \
	case "$@" in \
	  distclean-* | maintainer-clean-*) list='$(DIST_SUBDIRS)' ;; \
	  *) list='$(SUBDIRS)' ;; \
	esac; \
	rev=''; for subdir in $$list; do \
	  if test "$$subdir" = "."; then :; else \
	    rev="$$subdir $$rev"; \
	  fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	  echo "Making $$target in $$subdir"; \
	  if test "$$subdir" = "."; then \
	    local_target="$$target-am"; \
	  else \
	    local_target="$$target"; \
	  fi; \
	  (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) $$local_target) \
	  || eval $$failcom; \
	done && test -z "$$fail"
tags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) tags); \
	done
ctags-recursive:
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  test "$$subdir" = . || (cd $$subdir && $(MAKE) $(AM_MAKEFLAGS) ctags); \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS: tags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	if ($(ETAGS) --etags-include --version) >/dev/null 2>&1; then \
	  include_option=--etags-include; \
	  empty_fix=.; \
	else \
	  include_option=--include; \
	  empty_fix=; \
	fi; \
	list='$(SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test ! -f $$subdir/TAGS || \
	      tags="$$tags $$include_option=$$here/$$subdir/TAGS"; \
	  fi; \
	done; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS: ctags-recursive $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	$(mkdir_p) $(distdir)/../..
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
	list='$(DIST_SUBDIRS)'; for subdir in $$list; do \
	  if test "$$subdir" = .; then :; else \
	    test -d "$(distdir)/$$subdir" \
	    || $(mkdir_p) "$(distdir)/$$subdir" \
	    || exit 1; \
	    distdir=`$(am__cd) $(distdir) && pwd`; \
	    top_distdir=`$(am__cd) $(top_distdir) && pwd`; \
	    (cd $$subdir && \
	      $(MAKE) $(AM_MAKEFLAGS) \
	        top_distdir="$$top_distdir" \
	        distdir="$$distdir/$$subdir" \
	        distdir) \
	      || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
check: check-recursive
all-am: Makefile $(SCRIPTS)
installdirs: installdirs-recursive
installdirs-am:
install: install-recursive
install-exec: install-exec-recursive
install-data: install-data-recursive
uninstall: uninstall-recursive

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-recursive
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-recursive

clean-am: clean-checkPROGRAMS clean-generic mostlyclean-am

distclean: distclean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-recursive

dvi-am:

html: html-recursive

info: info-recursive

info-am:

install-data-am:

install-exec-am:

install-info: install-info-recursive

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-recursive
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-recursive

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-recursive

pdf-am:

ps: ps-recursive

ps-am:

uninstall-am: uninstall-info-am

uninstall-info: uninstall-info-recursive

.PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
	clean clean-checkPROGRAMS clean-generic clean-recursive ctags \
	ctags-recursive distclean distclean-compile distclean-generic \
	distclean-recursive distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs installdirs-am maintainer-clean \
	maintainer-clean-generic maintainer-clean-recursive \
	mostlyclean mostlyclean-compile mostlyclean-generic \
	mostlyclean-recursive pdf pdf-am ps ps-am tags tags-recursive \
	uninstall uninstall-am uninstall-info-am


@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@ # persuade the AIX linker not to junk apparently unused
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@ # function descriptors.  Unfortunately -Wl,-G -Wl,-bnogc
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@ # produces a link error on 64-bit AIX, hence only 32-bit
@VGP_PPC32_AIX5_TRUE@@VGP_PPC64_AIX5_FALSE@ # gets these flags.

# Valgrind unit self-tests
#hello_LDFLAGS		= -Wl,-defsym,valt_load_address=0x50000000 \
#			  -Wl,-T,$(top_builddir)/valt_load_address.lds
#hello_DEPENDENCIES 	= $(top_builddir)/valt_load_address.lds

# vgtest_ume is not working
#vgtest_ume_CFLAGS	= -DVGA_$(VG_ARCH) -DVGO_$(VG_OS)
#vgtest_ume_LDADD	= ../../coregrind/m_ume.o
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
